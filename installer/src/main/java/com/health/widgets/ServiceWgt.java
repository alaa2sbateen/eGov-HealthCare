/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.health.widgets;

import com.health.baseobjects.JCheckBoxTree2;
import com.health.installer.fund.utils.Util;
import com.health.objects.GetAvailibleServices;
import java.util.ArrayList;
import java.util.List;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author Inspiron
 */
public class ServiceWgt extends javax.swing.JPanel {

    /**
     * Creates new form ServiceWgt
     */
    DefaultTreeModel model_services;
    DefaultMutableTreeNode root_services;

    private List<GetAvailibleServices.Service> choosed_services = new ArrayList<>();

    public ServiceWgt() {
        initComponents();

        root_services = Util.getServiceNodes();
        model_services = new DefaultTreeModel(root_services);
        Services.setModel(model_services);

        Services.addCheckChangeEventListener(new JCheckBoxTree2.CheckChangeEventListener() {
            @Override
            public void checkStateChanged(JCheckBoxTree2.CheckChangeEvent event) {
                JCheckBoxTree2.Data data = (JCheckBoxTree2.Data) event.getSource();
                if (data.path.getLastPathComponent() == Services.getModel().getRoot()) {
                    Services.toggleRoot();
                    return;
                }
                if (data.is_checked) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) data.path.getLastPathComponent();
                    Util.getAllObjects(node, choosed_services);
                } else {
                    ArrayList<GetAvailibleServices.Service> services = new ArrayList<>();
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) data.path.getLastPathComponent();
                    Util.getAllObjects(node, services);
                    choosed_services.removeAll(services);
                }

                for (int i = 0; i < listeners.size(); i++) {
                    listeners.get(i).update(choosed_services);
                }

            }
        });
    }

    private List<onSelectionChangedListener> listeners = new ArrayList<>();

    public void registerListener(onSelectionChangedListener lis) {
        listeners.add(lis);
        lis.update(choosed_services);
    }

    public void unregisterListener(onSelectionChangedListener lis) {
        listeners.remove(lis);
    }

    public void setTreeVis(boolean vis) {
        Services.setEnabled(vis);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        service_label = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Services = new com.health.baseobjects.JCheckBoxTree2();

        service_label.setText("services");

        jScrollPane1.setViewportView(Services);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(service_label))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(service_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public interface onSelectionChangedListener {

        public void update(List<GetAvailibleServices.Service> services);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public com.health.baseobjects.JCheckBoxTree2 Services;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel service_label;
    // End of variables declaration//GEN-END:variables
}
