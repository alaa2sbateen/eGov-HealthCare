/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.health.widgets;

import com.health.objects.GetAvailibleServices;
import com.health.objects.GetSmartFeedBackList;
import com.health.objects.GetSmartFeedBackList.Patient;
import com.health.project.medteam.Globals;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Inspiron
 */
public class SmartDoctor extends javax.swing.JPanel implements ServiceWgt.onSelectionChangedListener, Globals.Updater {

    /**
     * Creates new form SmartDoctor
     */
    private List<GetAvailibleServices.Service> ser;

    private boolean connected = false;

    public SmartDoctor() {
        initComponents();
        services.registerListener(this);
        this.ser = new ArrayList<>();
        Pateint_Label.setText("Patients " + " (Empty)");
        Globals.register(this);
    }

    @Override
    public void update(List<GetAvailibleServices.Service> services) {
        this.ser = services;
    }

    @Override
    public void update() {
        if (connected) {

            List<Long> ids = new ArrayList<>();
            for (int i = 0; i < ser.size(); i++) {
                ids.add(ser.get(i).service_id);
            }
            List<Patient> patients = GetSmartFeedBackList.GetSmartFeedBackList(ids);
            if (patients != null || patients.isEmpty()) {
                Container.removeAll();
                for (int i = 0; i < patients.size(); i++) {
                    SmartPatient pa = new SmartPatient();
                    pa.setData(patients.get(i));
                    Container.add(pa);
                    Pateint_Label.setText("Patients " + " (" + patients.size() + ")");
                    connected = true;
                    ConnectBtn.setText("Disconnect");

                }
            } else {
                Container.removeAll();
                Pateint_Label.setText("Patients " + " (Empty)");
                connected = false;
                ConnectBtn.setText("Connect");
                System.out.print(this + "   Patients is null Smart FeedBack Smart Doctor");
            }

            if (connected) {
                services.setTreeVis(false);
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        services = new com.health.widgets.ServiceWgt();
        Pateint_Label = new javax.swing.JLabel();
        Container = new javax.swing.JPanel();
        ConnectBtn = new javax.swing.JButton();

        services.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Pateint_Label.setText("Patients");

        Container.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        Container.setLayout(new javax.swing.BoxLayout(Container, javax.swing.BoxLayout.Y_AXIS));

        ConnectBtn.setText("Connect");
        ConnectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(services, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(Container, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)))
                    .addComponent(ConnectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Pateint_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(services, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ConnectBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Pateint_Label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Container, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ConnectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectBtnActionPerformed
        // TODO add your handling code here:

        if (!connected) {

            List<Long> ids = new ArrayList<>();
            for (int i = 0; i < ser.size(); i++) {
                ids.add(ser.get(i).service_id);
            }
            List<Patient> patients = GetSmartFeedBackList.GetSmartFeedBackList(ids);
            System.out.println(patients);
            if (patients != null || patients.isEmpty()) {
                Container.removeAll();
                for (int i = 0; i < patients.size(); i++) {
                    SmartPatient pa = new SmartPatient();
                    pa.setData(patients.get(i));
                    Container.add(pa);
                    Pateint_Label.setText("Patients " + " (" + patients.size() + ")");
                    connected = true;
                    ConnectBtn.setText("Disconnect");

                }
            } else {
                Container.removeAll();
                Pateint_Label.setText("Patients " + " (Empty)");
                connected = false;
                ConnectBtn.setText("Connect");
                System.out.print(this + "   Patients is null Smart FeedBack Smart Doctor");
            }

            if (connected) {
                services.setTreeVis(false);
            }

        } else {

            Container.removeAll();
            Pateint_Label.setText("Patients " + " (Empty)");
            connected = false;
            ConnectBtn.setText("Connect");
            if (!connected) {
                services.setTreeVis(true);
            }
        }


    }//GEN-LAST:event_ConnectBtnActionPerformed

    public  void updateFromChild() {
        update();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConnectBtn;
    private javax.swing.JPanel Container;
    private javax.swing.JLabel Pateint_Label;
    private com.health.widgets.ServiceWgt services;
    // End of variables declaration//GEN-END:variables

}
