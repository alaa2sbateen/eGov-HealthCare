/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.health.widgets;

import com.health.objects.GetCondtion;
import com.health.objects.Types;
import com.health.project.medteam.Globals;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Inspiron
 */
public class ActiveCondtions extends javax.swing.JPanel implements Globals.Updater {

    /**
     * Creates new form CondtionTemplate
     */
    public ActiveCondtions() {
        initComponents();

        Globals.register(this);
        Globals.ActiveCondtions = new WeakReference<>(this);
    }

    private List<GetCondtion.Condtion> conds;

    private ListSelectionListener cur;

    public void setData() {
        conds = new ArrayList<>();
        for (int i = 0; i < Globals.activeCondtions.size(); i++) {
            if (Globals.activeCondtions.get(i).state == Types.State_Cond_Active) {
                conds.add(Globals.activeCondtions.get(i));
            }
        }

        List<String> names = new ArrayList<>();
        for (int i = 0; i < conds.size(); i++) {
            names.add(conds.get(i).name);
        }
        String[] datas = new String[names.size()];
        for (int i = 0; i < datas.length; i++) {
            datas[i] = names.get(i);
        }
        ListCondtions.setListData(datas);
        if (cur != null) {

            ListCondtions.removeListSelectionListener(cur);
        }

        cur = new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (ListCondtions.getSelectedValue() == null) {
                    return;
                }
                condtionDocker.setData(conds.get(ListCondtions.getSelectedIndex()));

            }
        };
        ListCondtions.addListSelectionListener(cur);

        if (conds.size() > 0) {
            ListCondtions.setSelectedIndex(0);
            condtionDocker.setVisible(true);
            revalidate();
            repaint();

        } else {
            condtionDocker.setVisible(false);
            ListCondtions.setListData(new String[]{"There are no active condtions"});

        }
    }

    @Override
    public void update() {

        setData();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        ListCondtions = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        condtionDocker = new com.health.widgets.CondtionDocker();

        setMaximumSize(new java.awt.Dimension(32767, 600));
        setPreferredSize(new java.awt.Dimension(700, 1400));

        ListCondtions.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(ListCondtions);

        jLabel1.setText("AvailibleCondtions");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(condtionDocker, javax.swing.GroupLayout.DEFAULT_SIZE, 999, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 678, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(condtionDocker, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> ListCondtions;
    private com.health.widgets.CondtionDocker condtionDocker;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

}
